#Mengimport permutation dari itertools
from itertools import permutations

#Membuat class bernama WeightGraph dan membuat atribut kosong bernama citylist.
class WeightedGraph:
    #initialization
    def __init__(self):
        self.cityList = {}

#Membuat fungsi printgraph. untuk city di citylist memprint citi ":" dan isi city di citylist
    def printGraph(self):
        #mengiterasi setiap city
        for city in self.cityList:
            #setiap kota print nama kota
            print(city, ":", self.cityList[city])


            # Print distances to neighboring cities
            for neighbor, distance in self.cityList[city].items():

                #print tetangga dan jarak
                print("    ->", neighbor, ":", distance)


    def tambahkanKota(self, kota):

        #jika kota tidak ada di cityList
        if kota not in self.cityList:

            #maka tambahkan kota
            self.cityList[kota] = {}
            return True
        return False


    def hapusKota(self, kotaDihapus):

        #jika kotaDihapus ada di cityList
        if kotaDihapus in self.cityList:

            # Remove the city from the city list
            del self.cityList[kotaDihapus]

            # Remove references to the deleted city from other cities
            for kota in self.cityList:

                #jika kotaDihapus ada di cityList[kota]
                if kotaDihapus in self.cityList[kota]:

                    #maka hapus kotaDihapus
                    del self.cityList[kota][kotaDihapus]
            return True
        return False


    def tambahkanJalan(self, kota1, kota2, jarak):
        if kota1 in self.cityList and kota2 in self.cityList:
            self.cityList[kota1][kota2] = jarak
            self.cityList[kota2][kota1] = jarak
            return True
        return False


    def hapusJalan(self, kota1, kota2):
